package sjsu.Nguyen_Wong.cs146.project2;

import static org.junit.Assert.*;

import org.junit.Test;

/*
 * This is the tester for the test cases that Professor Potika posted
 * We didn't know we were suppose to make and solve our own mazes so we tested
 * our program with her cases until we found out
 * We have our own, but decided to just leave it here if you want to take a look
 */
public class PotikaMazeTester 
{
	/*
	 * Creates the string[][] to use used to test against the expected actual output
	 */

	private final static String[][] MAZE4 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] BFS4 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", "8", " ", "6", "|"},
				{"+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "2", "|", "2", " ", "3", " ", "4", "|"},
				{"+", " ", "+", "-", "+", "-", "+", " ", "+"},
				{"|", "0", " ", "9", " ", "7", " ", "5", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "1", " ", "3", " ", "4", " ", "5", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] DFS4 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "2", " ", "3", " ", "4", "|"},
				{"+", " ", "+", "-", "+", "-", "+", " ", "+"},
				{"|", "8", " ", "7", " ", "6", " ", "5", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "9", " ", "0", " ", "1", " ", "2", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] MAZE4SOLUTION = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "#", "#", "#", "|", " ", " ", " ", "|"},
				{"+", "-", "+", "#", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "#", "#", "#", "#", "#", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "#", "+"},
				{"|", "#", "#", "#", "#", "#", "#", "#", "|"},
				{"+", "#", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "#", "#", "#", "#", "#", "#", "#", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] MAZE6 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}

		};

	private final static String[][] BFS6 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", "7", " ", "5", " ", "3", " ", "1", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "2", " ", "3", " ", "4", " ", "5", "|", "9", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", "|", "6", " ", "7", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|", "8", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", "4", " ", "2", " ", "0", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", "9", " ", "6", " ", "8", " ", "0", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},

		};

	private final static String[][] DFS6 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "2", " ", "3", " ", "4", " ", "5", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", "|", "6", " ", "7", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|", "8", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", "1", " ", "0", " ", "9", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", "2", " ", "3", " ", "4", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] MAZE6SOLUTION = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "#", "#", "#", "|", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "#", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "#", "#", "#", "#", "#", "#", "#", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "#", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", "|", "#", "#", "#", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", "#", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|", "#", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "#", "+"},
				{"|", " ", " ", " ", " ", " ", "|", "#", "#", "#", "#", "#", "|"},
				{"+", " ", "+", "-", "+", " ", "+", "#", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", "#", "#", "#", "#", "#", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}

		};

	private final static String[][] MAZE8 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", " ", " ", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", "|", " ", " ", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+", "-", "+", "-", "+", " ", "+", "-", "+"},
				{"|", " ", "|", " ", " ", " ", "|", " ", "|", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", " ", " ", " ", " ", " ", "|", " ", " ", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", "|", " ", "|", " ", "|", " ", "|", " ", "|", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] BFS8 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", "5", " ", "3", " ", "1", " ", "9", " ", "0", "|", "7", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", "3", "|", "2", " ", "3", " ", "4", " ", "5", "|", "8", "|", "2", " ", "4", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "0", " ", "2", "|", "9", " ", "1", "|", "6", " ", "7", "|", "8", " ", "6", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+", "-", "+", "-", "+", " ", "+", "-", "+"},
				{"|", "8", "|", "5", " ", "7", "|", "3", "|", "1", " ", "0", " ", "9", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+"},
				{"|", "6", " ", "5", " ", "4", " ", "3", " ", "2", "|", "2", " ", "3", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", "7", "|", "8", " ", "0", " ", "2", "|", "0", " ", "1", "|", "4", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+"},
				{"|", "9", "|", "6", "|", "9", "|", "4", "|", "8", "|", "6", " ", "5", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "1", " ", "4", "|", "7", " ", "5", " ", "6", "|", "7", " ", "8", " ", "9", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] DFS8 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", " ", " ", " ", " ", " ", "9", " ", "0", "|", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", "2", " ", "3", " ", "4", " ", "5", "|", "8", "|", "1", " ", "2", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", "|", "6", " ", "7", "|", "4", " ", "3", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+", "-", "+", "-", "+", " ", "+", "-", "+"},
				{"|", " ", "|", " ", " ", " ", "|", " ", "|", "7", " ", "6", " ", "5", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+"},
				{"|", "2", " ", "1", " ", "0", " ", "9", " ", "8", "|", "7", " ", "8", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", "3", "|", "8", " ", "9", " ", "0", "|", "5", " ", "6", "|", "9", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+"},
				{"|", "4", "|", "7", "|", " ", "|", "1", "|", "4", "|", "1", " ", "0", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "5", " ", "6", "|", " ", " ", "2", " ", "3", "|", "2", " ", "3", " ", "4", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}

		};

	private final static String[][] MAZE8SOLUTION = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "#", "#", "#", "|", " ", " ", " ", " ", " ", " ", "#", "#", "#", "|", " ", "|"},
				{"+", "-", "+", "#", "+", "-", "+", "-", "+", "-", "+", "#", "+", "#", "+", " ", "+"},
				{"|", " ", "|", "#", "#", "#", "#", "#", "#", "#", "|", "#", "|", "#", "#", "#", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "#", "+", "#", "+", "-", "+", "#", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", "|", "#", "#", "#", "|", "#", "#", "#", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+", "-", "+", "-", "+", "#", "+", "-", "+"},
				{"|", " ", "|", " ", " ", " ", "|", " ", "|", "#", "#", "#", "#", "#", "|", " ", "|"},
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "#", "+", "-", "+", "-", "+", " ", "+"},
				{"|", "#", "#", "#", "#", "#", "#", "#", "#", "#", "|", "#", "#", "#", "|", " ", "|"},
				{"+", "#", "+", "-", "+", "-", "+", "-", "+", "-", "+", "#", "+", "#", "+", " ", "+"},
				{"|", "#", "|", "#", "#", "#", "#", "#", "|", "#", "#", "#", "|", "#", "|", " ", "|"},
				{"+", "#", "+", "#", "+", "-", "+", "#", "+", "#", "+", "-", "+", "#", "+", " ", "+"},
				{"|", "#", "|", "#", "|", " ", "|", "#", "|", "#", "|", "#", "#", "#", "|", " ", "|"},
				{"+", "#", "+", "#", "+", " ", "+", "#", "+", "#", "+", "#", "+", "-", "+", " ", "+"},
				{"|", "#", "#", "#", "|", " ", " ", "#", "#", "#", "|", "#", "#", "#", "#", "#", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	@Test
	//tests to correct creation for a maze of 4 rows
	public void testMaze4() 
	{
		int rows = 4;
		Maze test = new Maze(rows);

		test.wallBreaker(test);
		assertArrayEquals(test.getMaze(), MAZE4);
	}

	@Test
	//tests for BFS for a maze of 4 rows
	public void testBFS4()
	{
		int rows = 4;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		BFS_Solver solve = new BFS_Solver();
		solve.doBFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), BFS4);
	}

	@Test
	//tests for DFS for a maze of 4 rows
	public void testDFS4()
	{
		int rows = 4;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		DFS_Solver solve = new DFS_Solver();
		solve.doDFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), DFS4);
	}

	@Test
	//tests for correct solution path of a maze of 4 rows
	public void testSolution4()
	{
		int rows = 4;
		Maze test = new Maze(rows);
		test.wallBreaker(test);
		DFS_Solver solve = new DFS_Solver();
		solve.shortestPath(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		solve.check(test.getMaze());
		assertArrayEquals(test.getMaze(), MAZE4SOLUTION);
	}

	@Test
	//tests to correct creation for a maze of 6 rows
	public void testMaze6() 
	{
		int rows = 6;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		assertArrayEquals(test.getMaze(), MAZE6);
	}

	@Test
	//tests for BFS for a maze of 6 rows
	public void testBFS6()
	{
		int rows = 6;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		BFS_Solver solve = new BFS_Solver();
		solve.doBFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), BFS6);
	}

	@Test
	//tests for DFS for a maze of 6 rows
	public void testDFS6()
	{
		int rows = 6;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		DFS_Solver solve = new DFS_Solver();
		solve.doDFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), DFS6);
	}

	@Test
	//tests for correct solution path of a maze of 6 rows
	public void testSolution6()
	{
		int rows = 6;
		Maze test = new Maze(rows);
		test.wallBreaker(test);
		DFS_Solver solve = new DFS_Solver();
		solve.shortestPath(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		solve.check(test.getMaze());
		assertArrayEquals(test.getMaze(), MAZE6SOLUTION);
	}

	@Test
	//tests to correct creation for a maze of 8 rows
	public void testMaze8() 
	{
		int rows = 8;
		Maze test = new Maze(rows);
		test.wallBreaker(test);
		assertArrayEquals(test.getMaze(), MAZE8);
	}

	@Test
	//tests for BFS for a maze of 8 rows
	public void testBFS8()
	{
		int rows = 8;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		BFS_Solver solve = new BFS_Solver();
		solve.doBFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), BFS8);
	}

	@Test
	//tests for DFS for a maze of 8 rows
	public void testDFS8()
	{
		int rows = 8;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		DFS_Solver solve = new DFS_Solver();
		solve.doDFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), DFS8);
	}

	@Test
	//tests for correct solution path of a maze of 8 rows
	public void testSolution8()
	{
		int rows = 8;
		Maze test = new Maze(rows);
		test.wallBreaker(test);
		DFS_Solver solve = new DFS_Solver();
		solve.shortestPath(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		solve.check(test.getMaze());
		assertArrayEquals(test.getMaze(), MAZE8SOLUTION);
	}

}
