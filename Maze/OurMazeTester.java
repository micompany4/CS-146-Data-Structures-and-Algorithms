package sjsu.Nguyen_Wong.cs146.project2;

import static org.junit.Assert.*;

import org.junit.Test;

/*
 * This is the tester for our randomly generated maze
 * The random seed is 1
 * Uses assertEquals to check if String[][]'s are equivalent or not
 */
public class OurMazeTester 
{

	/*
	 * Creates the string[][] to use used to test against the expected actual output
	 */

	private final static String[][] MAZE4 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] MAZE6 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", "|", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", "|", " ", "|", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", "|", " ", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}

		};

	private final static String[][] MAZE8 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", " ", "|", " ", " ", " ", "|", " ", " ", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", " ", "|", " ", " ", " ", " ", " ", "|", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+", "-", "+", " ", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", "|", " ", "|", " ", " ", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", " ", " ", " ", "|", " ", " ", " ", "|", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+", "-", "+"},
				{"|", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] BFS4 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", " ", "3", "|"},
				{"+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "0", "|", "2", "|", "9", " ", "1", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", "8", "|", "3", "|", "7", "|", "2", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", "6", " ", "4", " ", "5", "|", "4", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] BFS6 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", "|", "8", " ", "5", " ", "2", "|"},
				{"+", "-", "+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "9", "|", "2", "|", " ", " ", " ", " ", " ", "|", "0", "|"},
				{"+", " ", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", "7", "|", "3", "|", "2", " ", "3", " ", "4", "|", "8", "|"},
				{"+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+"},
				{"|", "5", " ", "4", "|", "1", "|", "4", "|", "5", " ", "6", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "6", " ", "8", " ", "0", "|", "1", " ", "9", " ", "7", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", " ", "7", " ", "3", " ", "6", " ", "9", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] BFS8 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", "9", "|", "2", "|", " ", " ", " ", "|", " ", " ", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", "7", "|", "3", "|", "2", " ", "3", " ", "4", "|", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+", "-", "+", " ", "+", "-", "+"},
				{"|", "5", " ", "4", "|", "1", "|", "1", "|", "5", " ", "6", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "6", " ", "8", " ", "0", "|", "9", " ", "8", " ", "7", "|", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", "0", " ", "2", "|", " ", " ", " ", "|", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+", "-", "+"},
				{"|", "2", " ", "4", "|", "5", " ", "4", " ", "3", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", "0", " ", "8", " ", "6", " ", "7", " ", "9", " ", "1", " ", "3", " ", "5", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}

		};

	private final static String[][] DFS4 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "2", "|", "7", " ", "8", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", "3", "|", "6", "|", "9", "|"},
				{"+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", " ", "4", " ", "5", "|", "0", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] DFS6 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "2", "|", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "3", "|", "0", " ", "1", " ", "2", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+"},
				{"|", "5", " ", "4", "|", "9", "|", " ", "|", "3", " ", "4", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "6", " ", "7", " ", "8", "|", "7", " ", "6", " ", "5", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", " ", " ", " ", "8", " ", "9", " ", "0", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String[][] DFS8 = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "0", " ", "1", "|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", "2", "|", " ", " ", " ", "|", " ", " ", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", "3", "|", "0", " ", "1", " ", "2", "|", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", " ", "+", " ", "+", "-", "+", " ", "+", "-", "+", " ", "+", "-", "+"},
				{"|", "5", " ", "4", "|", "9", "|", " ", "|", "3", " ", "4", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", " ", "+", "-", "+", " ", "+", "-", "+", " ", "+"},
				{"|", "6", " ", "7", " ", "8", "|", "7", " ", "6", " ", "5", "|", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", "8", " ", "9", "|", " ", " ", " ", "|", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+", "-", "+"},
				{"|", " ", " ", " ", "|", "2", " ", "1", " ", "0", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", "3", " ", "4", " ", "5", " ", "6", " ", "7", " ", "8", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String MAZESOLUTION4[][] = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "#", "#", "#", "|", " ", " ", " ", "|"},
				{"+", "-", "+", "#", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "#", "|", "#", "#", "#", "|"},
				{"+", " ", "+", "#", "+", "#", "+", "#", "+"},
				{"|", " ", "|", "#", "|", "#", "|", "#", "|"},
				{"+", " ", "+", "#", "+", "#", "+", "#", "+"},
				{"|", " ", " ", "#", "#", "#", "|", "#", "|"},
				{"+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String MAZESOLUTION6[][] = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "#", "#", "#", "|", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "#", "+", " ", "+", " ", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "#", "|", " ", " ", " ", " ", " ", "|", " ", "|"},
				{"+", " ", "+", "#", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", "|", "#", "|", "#", "#", "#", "#", "#", "|", " ", "|"},
				{"+", " ", "+", "#", "+", "#", "+", "-", "+", "#", "+", " ", "+"},
				{"|", "#", "#", "#", "|", "#", "|", " ", "|", "#", "#", "#", "|"},
				{"+", "#", "+", "-", "+", "#", "+", " ", "+", "-", "+", "#", "+"},
				{"|", "#", "#", "#", "#", "#", "|", "#", "#", "#", "#", "#", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "#", "+", "-", "+", "-", "+"},
				{"|", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", "#", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};

	private final static String MAZESOLUTION8[][] = 
		{
				{"+", " ", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+"},
				{"|", "#", "#", "#", "|", " ", " ", " ", " ", " ", "|", " ", " ", " ", " ", " ", "|"},
				{"+", "-", "+", "#", "+", " ", "+", "-", "+", " ", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", "#", "|", " ", " ", " ", "|", " ", " ", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", "#", "+", "-", "+", "-", "+", "-", "+", " ", "+", " ", "+", " ", "+"},
				{"|", " ", "|", "#", "|", "#", "#", "#", "#", "#", "|", " ", "|", " ", "|", " ", "|"},
				{"+", " ", "+", "#", "+", "#", "+", "-", "+", "#", "+", "-", "+", " ", "+", "-", "+"},
				{"|", "#", "#", "#", "|", "#", "|", " ", "|", "#", "#", "#", "|", " ", " ", " ", "|"},
				{"+", "#", "+", "-", "+", "#", "+", " ", "+", "-", "+", "#", "+", "-", "+", " ", "+"},
				{"|", "#", "#", "#", "#", "#", "|", "#", "#", "#", "#", "#", "|", " ", " ", " ", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "#", "+", "-", "+", "-", "+", " ", "+", " ", "+"},
				{"|", " ", " ", " ", " ", " ", "|", "#", "#", "#", "|", " ", " ", " ", "|", " ", "|"},
				{"+", "-", "+", " ", "+", "-", "+", "-", "+", "#", "+", " ", "+", " ", "+", "-", "+"},
				{"|", " ", " ", " ", "|", "#", "#", "#", "#", "#", "|", " ", "|", " ", " ", " ", "|"},
				{"+", " ", "+", "-", "+", "#", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"},
				{"|", " ", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "|"},
				{"+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", "-", "+", " ", "+"}
		};


	@Test
	//test for the creation of a size 4 maze
	public void testMaze4() 
	{
		int rows = 4;
		Maze test = new Maze(rows);

		test.wallBreaker(test);
		assertArrayEquals(test.getMaze(), MAZE4);
	}

	@Test
	//test for the bfs path solution for a size 4 maze
	public void testBFS4() 
	{
		int rows = 4;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		BFS_Solver solve = new BFS_Solver();
		solve.doBFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), BFS4);
	}

	@Test
	//test for the dfs path solution for a size 4 maze
	public void testDFS4() 
	{
		int rows = 4;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		DFS_Solver solve = new DFS_Solver();
		solve.doDFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), DFS4);
	}

	@Test
	//test for the shortest path for a size 4 maze
	public void testSolution4() 
	{
		int rows = 4;
		Maze test = new Maze(rows);
		test.wallBreaker(test);
		DFS_Solver solve = new DFS_Solver();
		solve.shortestPath(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		solve.check(test.getMaze());
		assertArrayEquals(test.getMaze(), MAZESOLUTION4);
	}

	@Test
	//test for the creation for a size 6 maze
	public void testMaze6() 
	{
		int rows = 6;
		Maze test = new Maze(rows);

		test.wallBreaker(test);
		assertArrayEquals(test.getMaze(), MAZE6);
	}

	@Test
	//test for the bfs path solution for size 6
	public void testBFS6() 
	{
		int rows = 6;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		BFS_Solver solve = new BFS_Solver();
		solve.doBFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), BFS6);
	}

	@Test
	//test for the dfs path solution for size 6
	public void testDFS6() 
	{
		int rows = 6;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		DFS_Solver solve = new DFS_Solver();
		solve.doDFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), DFS6);
	}

	@Test
	//test for the shortest path solution for size 6
	public void testSolution6() 
	{
		int rows = 6;
		Maze test = new Maze(rows);
		test.wallBreaker(test);
		DFS_Solver solve = new DFS_Solver();
		solve.shortestPath(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		solve.check(test.getMaze());
		assertArrayEquals(test.getMaze(), MAZESOLUTION6);
	}

	@Test
	//test for the creation of a maze of size 8
	public void testMaze8() 
	{
		int rows = 8;
		Maze test = new Maze(rows);

		test.wallBreaker(test);
		assertArrayEquals(test.getMaze(), MAZE8);
	}

	@Test
	//test the bfs path solution for a size 8 maze
	public void testBFS8() 
	{
		int rows = 8;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		BFS_Solver solve = new BFS_Solver();
		solve.doBFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), BFS8);
	}

	@Test
	//test the dfs path solution for a size 8 maze
	public void testDFS8() 
	{
		int rows = 8;
		Maze test = new Maze(rows);
		test.wallBreaker(test);

		DFS_Solver solve = new DFS_Solver();
		solve.doDFS(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		assertArrayEquals(test.getMaze(), DFS8);
	}

	@Test
	//test the shortest path for a size 8 maze
	public void testSolution8() 
	{
		int rows = 8;
		Maze test = new Maze(rows);
		test.wallBreaker(test);
		DFS_Solver solve = new DFS_Solver();
		solve.shortestPath(test.getTreeMaze()[0], test.getTreeMaze()[(rows*rows)-1], test.getMaze());
		solve.check(test.getMaze());
		assertArrayEquals(test.getMaze(), MAZESOLUTION8);
	}
}

